name: Docker CD

on:
  workflow_run:
    workflows: ["Docker CI"]
    types: [completed]
  workflow_dispatch: {}

concurrency:
  group: "docker-cd-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to Server
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout (infra files)
        uses: actions/checkout@v4

      - name: Validate required secrets
        env:
          REQ_VPS_HOST: ${{ secrets.VPS_HOST }}
          REQ_VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          REQ_VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
          DKR_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
          DKR_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        run: |
          set -Eeuo pipefail
          [ -n "$REQ_VPS_HOST" ] || { echo "::error::Missing VPS_HOST"; exit 1; }
          [ -n "$REQ_VPS_USERNAME" ] || { echo "::error::Missing VPS_USERNAME"; exit 1; }
          [ -n "$REQ_VPS_SSH_KEY" ] || { echo "::error::Missing VPS_SSH_KEY"; exit 1; }
          if [ -z "$DKR_USER" ] || [ -z "$DKR_TOKEN" ]; then
            echo "::warning::Docker Hub creds not set. Assuming public image."
          fi

      # - name: Guard: ensure infra exists in repo
      #   run: |
      #     set -Eeuo pipefail
      #     test -d infra || { echo "::error::infra/ not found at repo root"; exit 1; }
      #     test -f infra/docker-compose.yml || { echo "::error::infra/docker-compose.yml missing"; exit 1; }

      - name: Pack infra as tarball
        run: |
          set -Eeuo pipefail
          tar -czf infra.tar.gz -C infra .
          ls -lah infra.tar.gz

      - name: SSH Hello (connectivity check)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          script: |
            set -Eeuo pipefail
            echo "SSH OK on $(hostname)"

      - name: Prep /opt/app on VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          script: |
            set -Eeuo pipefail
            sudo mkdir -p /opt/app
            sudo chown -R "$USER:$USER" /opt/app

      - name: Copy tarball to VPS (scp)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          overwrite: true
          debug: true
          source: infra.tar.gz
          target: /opt/app/

      - name: Unpack infra on VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          script: |
            set -Eeuo pipefail
            cd /opt/app
            tar -xzf infra.tar.gz
            rm -f infra.tar.gz
            ls -lah /opt/app

      - name: Deploy via SSH (HTTP only)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          debug: true
          script_stop: true
          envs: DKR_USER,DKR_TOKEN
          script: |
            set -Eeuo pipefail
            cd /opt/app
            [ -f docker-compose.yml ] || { echo "::error::docker-compose.yml missing"; exit 1; }
            [ -f nginx/nginx.conf ] || { echo "::error::nginx/nginx.conf missing"; exit 1; }
            [ -f nginx/conf.d/app.conf ] || { echo "::error::nginx/conf.d/app.conf missing"; exit 1; }

            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
              sudo usermod -aG docker "$USER" || true
            fi
            sudo systemctl enable --now docker || true
            sudo docker --version
            sudo docker compose version || true

            if [ -n "${DKR_USER:-}" ] && [ -n "${DKR_TOKEN:-}" ]; then
              echo "$DKR_TOKEN" | sudo docker login -u "$DKR_USER" --password-stdin
            fi

            if grep -q "__DOCKER_HUB_IMAGE__" docker-compose.yml; then
              if [ -n "${DKR_USER:-}" ]; then
                sudo sed -i "s|__DOCKER_HUB_IMAGE__|$DKR_USER/admin-app:latest|g" docker-compose.yml
              else
                echo "::warning::__DOCKER_HUB_IMAGE__ found but DOCKER_HUB_USERNAME is empty"
              fi
            fi

            sudo docker compose -f docker-compose.yml config
            sudo docker compose up -d nginx express-app-admin-1
            sudo docker compose exec -T nginx nginx -t
            # [ -f scripts/render_upstream.sh ] && sudo bash scripts/render_upstream.sh || true
            sudo docker compose up -d express-app-admin-2 express-app-admin-3
            sudo docker compose exec -T nginx nginx -s reload || true
            curl -fsS -m 5 http://127.0.0.1/health || echo "::warning::/health not responding"
            echo "Deployment complete âœ… (HTTP only)"
