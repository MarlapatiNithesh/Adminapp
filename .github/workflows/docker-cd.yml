name: Docker CD

on:
  workflow_run:
    workflows: ["Docker CI"]
    types: [completed]
  workflow_dispatch: {}  # allow manual runs

concurrency:
  group: "docker-cd-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to VPS
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate secrets
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
          DKR_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
          DKR_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        run: |
          set -Eeuo pipefail
          [ -n "$VPS_HOST" ] || { echo "::error::Missing VPS_HOST"; exit 1; }
          [ -n "$VPS_USERNAME" ] || { echo "::error::Missing VPS_USERNAME"; exit 1; }
          [ -n "$VPS_SSH_KEY" ] || { echo "::error::Missing VPS_SSH_KEY"; exit 1; }
          echo "Secrets validated âœ…"

      - name: Pack infra
        run: tar -czf infra.tar.gz -C infra .

      - name: SSH connectivity check
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          script: |
            set -Eeuo pipefail
            echo "SSH OK on $(hostname)"
            whoami
            uname -a

      - name: Prepare /opt/app on VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          debug: true
          script: |
            set -Eeuo pipefail
            sudo rm -rf /opt/app/* || true
            sudo mkdir -p /opt/app
            sudo chown -R "$USER:$USER" /opt/app

      - name: Copy infra to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          overwrite: true
          debug: true
          source: infra.tar.gz
          target: /opt/app/

      - name: Unpack infra
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          debug: true
          script: |
            set -Eeuo pipefail
            cd /opt/app
            tar -xzf infra.tar.gz
            rm -f infra.tar.gz

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        env:
          DKR_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
          DKR_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          debug: true
          script: |
            set -Eeuo pipefail
            set -x

            APP_DIR="/opt/app"
            cd "$APP_DIR"

            # ðŸ”¹ Install Docker if missing
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
              sudo usermod -aG docker "$USER" || true
              sudo systemctl enable --now docker
            fi

            # ðŸ”¹ Install Docker Compose if missing
            if ! docker compose version >/dev/null 2>&1; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # ðŸ”¹ Docker Hub login
            if [ -n "${DKR_USER:-}" ] && [ -n "${DKR_TOKEN:-}" ]; then
              echo "$DKR_TOKEN" | sudo docker login -u "$DKR_USER" --password-stdin
            fi

            # ðŸ”¹ Replace placeholder image
            if grep -q "__DOCKER_HUB_IMAGE__" docker-compose.yml && [ -n "${DKR_USER:-}" ]; then
              sudo sed -i "s|__DOCKER_HUB_IMAGE__|$DKR_USER/admin-app:latest|g" docker-compose.yml
            fi

            # ðŸ”¹ Validate docker-compose
            sudo docker compose -f docker-compose.yml config

            # ðŸ”¹ Cleanup old containers/images
            sudo docker ps -aq --filter "name=express-app-admin" | xargs -r sudo docker rm -f || true
            sudo docker ps -aq --filter "ancestor=admin-app" | xargs -r sudo docker rm -f || true
            if [ -n "${DKR_USER:-}" ]; then
              sudo docker ps -aq --filter "ancestor=$DKR_USER/admin-app:latest" | xargs -r sudo docker rm -f || true
            fi
            sudo docker images -q --filter "dangling=true" | xargs -r sudo docker rmi -f || true
            sudo docker rmi -f $(sudo docker images -q admin-app) || true
            if [ -n "${DKR_USER:-}" ]; then
              sudo docker rmi -f "$DKR_USER/admin-app:latest" || true
            fi

            # ðŸ”¹ Pull latest image
            if [ -n "${DKR_USER:-}" ]; then
              sudo docker pull "$DKR_USER/admin-app:latest"
            fi

            # ðŸ”¹ Start Nginx + first app
            sudo docker compose up -d --force-recreate --pull always nginx express-app-admin-1

            # ðŸ”¹ Validate nginx
            sudo docker compose run --rm nginx nginx -t

            # ðŸ”¹ Render upstreams dynamically if script exists
            if [ -f scripts/render_upstream.sh ]; then
              sudo chmod +x scripts/render_upstream.sh
              sudo bash scripts/render_upstream.sh
            fi

            # ðŸ”¹ Start remaining replicas
            sudo docker compose up -d --force-recreate --pull always express-app-admin-2 express-app-admin-3

            # ðŸ”¹ Reload nginx
            sudo docker compose exec -T nginx nginx -s reload


