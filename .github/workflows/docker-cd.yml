name: Docker CD

on:
  workflow_run:
    workflows: ["Docker CI"]
    types: [completed]

concurrency:
  group: docker-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to Server
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (infra files)
        uses: actions/checkout@v4

      - name: Debug: show infra layout
        run: |
          echo "PWD=$(pwd)"
          ls -lah
          echo "---- infra ----"
          ls -lah infra || true
          echo "---- infra/nginx ----"
          ls -lah infra/nginx || true
          echo "---- infra/nginx/conf.d ----"
          ls -lah infra/nginx/conf.d || true
          echo "---- infra/scripts ----"
          ls -lah infra/scripts || true

      - name: Guard: ensure infra exists
        run: |
          test -d infra || (echo "::error::infra/ not found at repo root" && exit 1)
          test -f infra/docker-compose.yml || (echo "::error::infra/docker-compose.yml missing" && exit 1)

      # IMPORTANT: scp-action `source` is a single, comma-separated string (no spaces)
      - name: Copy infra to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          overwrite: true
          debug: true
          source: "infra/docker-compose.yml,infra/nginx/**,infra/scripts/**"
          target: "/opt/app/"

      - name: Deploy via SSH (docker compose + 3 replicas + optional TLS)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          debug: true
          script_stop: true
          script: |
            set -Eeuo pipefail
            echo "Starting deployment…"
            cd /opt/app

            # sanity check files
            ls -lah
            [ -f docker-compose.yml ] || (echo "docker-compose.yml missing in /opt/app" && exit 1)

            docker --version
            docker compose version

            # login to Docker Hub if your repo is private
            if [ -n "${{ secrets.DOCKER_HUB_ACCESS_TOKEN || '' }}" ]; then
              echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login \
                -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
            fi

            # replace placeholder image in compose with your hub image
            sed -i "s|__DOCKER_HUB_IMAGE__|${{ secrets.DOCKER_HUB_USERNAME }}/admin-app:latest|g" docker-compose.yml

            # stamp domain/IP if provided (for HTTPS use a domain)
            if [ -n "${{ secrets.DOMAIN || '' }}" ]; then
              sed -i "s/DOMAIN_PLACEHOLDER/${{ secrets.DOMAIN }}/g" nginx/conf.d/app.conf || true
              sed -i "s/www.DOMAIN_PLACEHOLDER/www.${{ secrets.DOMAIN }}/g" nginx/conf.d/app.conf || true
            fi

            docker compose pull || true

            # bring up nginx + one app first (ACME needs port 80)
            docker compose up -d nginx express-app-admin-1

            # write upstreams from running replicas (1 for now)
            chmod +x scripts/render_upstream.sh
            bash scripts/render_upstream.sh

            # first-run only: issue Let's Encrypt if DOMAIN provided (LE does NOT work for raw IPs)
            if [ -n "${{ secrets.DOMAIN || '' }}" ]; then
              CERT_DIR="/var/lib/docker/volumes/infra_certbot-certs/_data/live/${{ secrets.DOMAIN }}"
              if [ ! -d "$CERT_DIR" ]; then
                echo "Issuing TLS cert for ${{ secrets.DOMAIN }}…"
                docker compose run --rm certbot certbot certonly \
                  --webroot -w /var/www/certbot \
                  -d "${{ secrets.DOMAIN }}" -d "www.${{ secrets.DOMAIN }}" \
                  --email "${{ secrets.LETSENCRYPT_EMAIL }}" --agree-tos --no-eff-email || true
                docker compose restart nginx || true
              fi
            fi

            # scale to 3 replicas, regenerate upstreams, reload nginx
            docker compose up -d express-app-admin-1 express-app-admin-2 express-app-admin-3
            bash scripts/render_upstream.sh

            echo "Deployment complete ✅"
