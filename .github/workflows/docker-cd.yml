name: Docker CD

on:
  workflow_run:
    workflows: ["Docker CI"]
    types: [completed]
  workflow_dispatch: {}

concurrency:
  group: "docker-cd-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to VPS
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate secrets
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
          DKR_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
          DKR_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        run: |
          set -Eeuo pipefail
          [ -n "$VPS_HOST" ] || { echo "::error::Missing VPS_HOST"; exit 1; }
          [ -n "$VPS_USERNAME" ] || { echo "::error::Missing VPS_USERNAME"; exit 1; }
          [ -n "$VPS_SSH_KEY" ] || { echo "::error::Missing VPS_SSH_KEY"; exit 1; }
          echo "Secrets validated ✅"

      - name: Pack infra
        run: tar -czf infra.tar.gz -C infra .

      - name: SSH connectivity check
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          debug: true
          script: |
            set -Eeuo pipefail
            echo "SSH OK on $(hostname)"

      - name: Prepare /opt/app on VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          debug: true
          script: |
            sudo rm -rf /opt/app/*
            sudo mkdir -p /opt/app
            sudo chown -R "$USER:$USER" /opt/app

      - name: Copy infra to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          overwrite: true
          debug: true
          source: infra.tar.gz
          target: /opt/app/

      - name: Unpack infra
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          debug: true
          script: |
            cd /opt/app
            tar -xzf infra.tar.gz
            rm -f infra.tar.gz

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        env:
          DKR_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
          DKR_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          debug: true
          script: |
            set -Eeuo pipefail
            set -x

            APP_DIR="/opt/app"
            cd "$APP_DIR"

            # Sanity checks
            [ -f docker-compose.yml ] || { echo "::error::docker-compose.yml missing"; exit 1; }
            [ -f nginx/nginx.conf ] || { echo "::error::nginx/nginx.conf missing"; exit 1; }
            [ -f nginx/conf.d/app.conf ] || { echo "::error::nginx/conf.d/app.conf missing"; exit 1; }

            # Docker + Compose
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
              sudo usermod -aG docker "$USER" || true
            fi
            sudo systemctl enable --now docker || true
            sudo docker --version
            sudo docker compose version || true

            # Docker login
            if [ -n "${DKR_USER:-}" ] && [ -n "${DKR_TOKEN:-}" ]; then
              echo "$DKR_TOKEN" | sudo docker login -u "$DKR_USER" --password-stdin
            fi

            # Replace placeholder image
            if grep -q "__DOCKER_HUB_IMAGE__" docker-compose.yml && [ -n "${DKR_USER:-}" ]; then
              sudo sed -i "s|__DOCKER_HUB_IMAGE__|$DKR_USER/admin-app:latest|g" docker-compose.yml
            fi

            # Validate docker-compose
            sudo docker compose -f docker-compose.yml config

            # Cleanup
            sudo docker compose down --remove-orphans
            sudo docker system prune -af
            mkdir -p nginx/conf.d/upstreams
            rm -f nginx/conf.d/upstreams/node_upstream.conf || true

            # Start all app replicas + nginx
            sudo docker compose up -d express-app-admin-1 express-app-admin-2 express-app-admin-3 nginx

            # Wait for all containers
            for service in express-app-admin-1 express-app-admin-2 express-app-admin-3; do
              echo "Waiting for $service to be running..."
              sudo docker wait "$service" >/dev/null
            done

            # Generate node_upstream dynamically using service names
            TMP_FILE="nginx/conf.d/upstreams/node_upstream.conf.tmp"
            {
              echo "upstream node_upstream {"
              echo "    least_conn;"
              for service in express-app-admin-1 express-app-admin-2 express-app-admin-3; do
                echo "    server ${service}:5000 max_fails=3 fail_timeout=5s;"
              done
              echo "    keepalive 64;"
              echo "}"
            } >"$TMP_FILE"
            mv -f "$TMP_FILE" "nginx/conf.d/upstreams/node_upstream.conf"

            # Validate and reload Nginx
            sudo docker compose exec -T nginx nginx -t
            sudo docker compose exec -T nginx nginx -s reload

            # Health check
            curl -fsS -m 5 http://127.0.0.1/health || echo "::warning::/health not responding"

            echo "Deployment complete ✅"



