
name: Docker CD

on:
  workflow_run:
    workflows: ["Docker CI"]
    types: [completed]
  workflow_dispatch: {}   # manual trigger for testing

concurrency:
  group: docker-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to Server
    # Run when CI succeeded OR when manually triggered
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout (infra files)
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          set -Eeuo pipefail
          set -x
          # Do NOT use ?Missing inside ${{ }}. Check in bash instead.
          if [ -z "${{ secrets.VPS_HOST }}" ]; then
            echo "::error::Missing required secret: VPS_HOST"; exit 1
          fi
          if [ -z "${{ secrets.VPS_USERNAME }}" ]; then
            echo "::error::Missing required secret: VPS_USERNAME"; exit 1
          fi
          if [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
            echo "::error::Missing required secret: VPS_SSH_KEY"; exit 1
          fi
          echo "Secrets OK ✅"
          if [ -z "${{ secrets.DOCKER_HUB_USERNAME }}" ] || [ -z "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" ]; then
            echo "::warning::Docker Hub creds not set. Assuming public image."
          fi

      - name: Debug: show infra layout
        run: |
          set -Eeuo pipefail
          set -x
          echo "PWD=$(pwd)"
          ls -lah
          echo "---- infra ----"
          ls -lah infra || true
          echo "---- infra/nginx ----"
          ls -lah infra/nginx || true
          echo "---- infra/nginx/conf.d ----"
          ls -lah infra/nginx/conf.d || true
          echo "---- infra/scripts ----"
          ls -lah infra/scripts || true

      - name: Guard: ensure infra exists
        run: |
          set -Eeuo pipefail
          set -x
          test -d infra || (echo "::error::infra/ not found at repo root" && exit 1)
          test -f infra/docker-compose.yml || (echo "::error::infra/docker-compose.yml missing" && exit 1)

      - name: SSH Hello (connectivity check)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          script: |
            set -Eeuo pipefail
            set -x
            echo "SSH OK on $(hostname)"
            whoami
            uname -a

      - name: Prep /opt/app
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          script: |
            set -Eeuo pipefail
            set -x
            sudo mkdir -p /opt/app
            sudo chown -R $USER:$USER /opt/app
            ls -lah /opt/app || true

      # Copy to VPS; flatten "infra/" into /opt/app/
      - name: Copy infra to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          overwrite: true
          debug: true
          source: "infra/docker-compose.yml,infra/nginx/**,infra/scripts/**"
          target: "/opt/app/"
          strip_components: 1

      - name: Deploy via SSH (HTTP only)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          debug: true
          script_stop: true
          script: |
            set -Eeuo pipefail
            set -x

            cd /opt/app

            # Sanity checks
            [ -f docker-compose.yml ] || (echo "::error::docker-compose.yml missing in /opt/app" && exit 1)
            [ -f nginx/nginx.conf ] || (echo "::error::nginx/nginx.conf missing" && exit 1)
            [ -f nginx/conf.d/app.conf ] || (echo "::error::nginx/conf.d/app.conf missing" && exit 1)

            # Ensure Docker + Compose
            if ! command -v docker >/dev/null 2>&1; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com | sh
              sudo usermod -aG docker $USER || true
            fi
            sudo systemctl enable --now docker || true
            sudo docker --version
            sudo docker compose version || true

            # Docker Hub login (only if private image)
            if [ -n "${{ secrets.DOCKER_HUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" ]; then
              echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | sudo docker login \
                -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
            fi

            # Replace image placeholder if present
            if grep -q "__DOCKER_HUB_IMAGE__" docker-compose.yml; then
              if [ -n "${{ secrets.DOCKER_HUB_USERNAME }}" ]; then
                sudo sed -i "s|__DOCKER_HUB_IMAGE__|${{ secrets.DOCKER_HUB_USERNAME }}/admin-app:latest|g" docker-compose.yml
              else
                echo "::warning::__DOCKER_HUB_IMAGE__ found but DOCKER_HUB_USERNAME is empty"
              fi
            fi

            # Validate compose BEFORE starting
            sudo docker compose -f docker-compose.yml config

            # Start nginx + one app first
            sudo docker compose up -d nginx express-app-admin-1

            # Validate Nginx config inside the container
            sudo docker compose exec -T nginx nginx -t

            # Optional upstream rendering
            if [ -f scripts/render_upstream.sh ]; then
              sudo chmod +x scripts/render_upstream.sh
              sudo bash scripts/render_upstream.sh || true
            fi

            # Start remaining replicas
            sudo docker compose up -d express-app-admin-2 express-app-admin-3

            # Reload Nginx
            sudo docker compose exec -T nginx nginx -s reload || true

            # Health probe (adjust path if needed)
            curl -fsS -m 5 http://127.0.0.1/health || echo "::warning::/health not responding (ensure route exists)"

            echo "Deployment complete ✅ (HTTP only)"
