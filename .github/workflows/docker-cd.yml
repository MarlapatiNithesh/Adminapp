name: Docker CD

on:
  workflow_run:
    workflows: ["Docker CI"]
    types: [completed]

concurrency:
  group: docker-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to Server
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout (infra files only)
        uses: actions/checkout@v4

      - name: Debug: show infra layout
        run: |
          echo "PWD=$(pwd)"
          ls -lah
          echo "---- infra ----"
          ls -lah infra || true
          echo "---- infra/nginx ----"
          ls -lah infra/nginx || true
          echo "---- infra/nginx/conf.d ----"
          ls -lah infra/nginx/conf.d || true
          echo "---- infra/scripts ----"
          ls -lah infra/scripts || true

      - name: Guard: ensure infra exists
        run: |
          test -d infra || (echo "::error::infra/ not found at repo root" && exit 1)
          test -f infra/docker-compose.yml || (echo "::error::infra/docker-compose.yml missing" && exit 1)

      - name: Prime remote dir & permissions
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            set -Eeuo pipefail
            sudo mkdir -p /opt/app
            sudo chown -R $USER:$USER /opt/app

      # copy to VPS; flatten "infra/" so files land directly in /opt/app
      - name: Copy infra to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          overwrite: true
          debug: true
          # NOTE: quotes & commas per action docs; wildcards are OK
          source: "infra/docker-compose.yml,infra/nginx/**,infra/scripts/**"
          target: "/opt/app/"
          strip_components: 1

      - name: Deploy via SSH (docker compose + 3 replicas + optional TLS)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          debug: true
          script_stop: true
          script: |
            set -Eeuo pipefail
            cd /opt/app

            # sanity check
            [ -f docker-compose.yml ] || (echo "::error::docker-compose.yml missing in /opt/app" && exit 1)
            [ -f nginx/nginx.conf ] || (echo "::error::nginx/nginx.conf missing" && exit 1)
            [ -f nginx/conf.d/app.conf ] || (echo "::error::nginx/conf.d/app.conf missing" && exit 1)

            # ensure docker + compose available
            if ! command -v docker >/dev/null 2>&1; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com | sh
              sudo usermod -aG docker $USER || true
            fi
            if ! docker compose version >/dev/null 2>&1; then
              echo "::warning::Docker Compose v2 not found; continuing but commands may fail."
            fi

            sudo systemctl enable --now docker || true
            sudo docker --version
            sudo docker compose version || true

            # Docker Hub login (only if repo is private)
            if [ -n "${{ secrets.DOCKER_HUB_ACCESS_TOKEN || '' }}" ]; then
              echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | sudo docker login \
                -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
            fi

            # replace image placeholder in compose
            sudo sed -i "s|__DOCKER_HUB_IMAGE__|${{ secrets.DOCKER_HUB_USERNAME }}/admin-app:latest|g" docker-compose.yml

            # stamp domain into nginx vhost (for HTTPS). LE will NOT work for raw IPs.
            if [ -n "${{ secrets.DOMAIN || '' }}" ]; then
              sudo sed -i "s/DOMAIN_PLACEHOLDER/${{ secrets.DOMAIN }}/g" nginx/conf.d/app.conf || true
              sudo sed -i "s/www.DOMAIN_PLACEHOLDER/www.${{ secrets.DOMAIN }}/g" nginx/conf.d/app.conf || true
            fi

            # pull latest images referenced by compose
            sudo docker compose pull || true

            # start nginx + one app first (so ACME http-01 can work)
            sudo docker compose up -d nginx express-app-admin-1

            # optional: generate upstreams
            if [ -f scripts/render_upstream.sh ]; then
              sudo chmod +x scripts/render_upstream.sh
              sudo bash scripts/render_upstream.sh || true
            fi

            # first-run: issue Let's Encrypt certs if DOMAIN provided
            if [ -n "${{ secrets.DOMAIN || '' }}" ]; then
              if ! sudo docker compose exec -T nginx sh -c "test -f /etc/letsencrypt/live/${{ secrets.DOMAIN }}/fullchain.pem"; then
                echo "Issuing TLS cert for ${{ secrets.DOMAIN }}…"
                sudo docker compose run --rm certbot certbot certonly \
                  --webroot -w /var/www/certbot \
                  -d "${{ secrets.DOMAIN }}" -d "www.${{ secrets.DOMAIN }}" \
                  --email "${{ secrets.LETSENCRYPT_EMAIL }}" --agree-tos --no-eff-email || true
                sudo docker compose restart nginx || true
              fi
            fi

            # bring up all three replicas
            sudo docker compose up -d express-app-admin-1 express-app-admin-2 express-app-admin-3

            # reload nginx after upstream changes
            if [ -f scripts/render_upstream.sh ]; then
              sudo bash scripts/render_upstream.sh || sudo docker compose exec -T nginx nginx -s reload || true
            else
              sudo docker compose exec -T nginx nginx -s reload || true
            fi

            echo "Deployment complete ✅"
